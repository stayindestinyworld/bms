<partial name="_CommonJScript" />
<partial name="_FormatJScript" />
<partial name="_ValidateJScript" />
<partial name="_APIJScript" />
<partial name="_InfinityStonePageJScript" />
<partial name="_InfinityStonePageViewModelJScript" />
<script type="text/javascript">
    var SiwUserInfinityStonePageViewModel = function () {
        var self = this;
        self.processing = ko.observable(new ModelProcessing());
        self.transition = ko.observable(new ModelTransition());
        self.infinityStonePageVM = ko.observable(null);
        self.walletID = ko.observable(null);
        const showWallet = document.querySelector(".wallet");
        self.initData = function () {
            var infinityStonePageVM = new InfinityStonePageViewModel();
            infinityStonePageVM.initModel(self.transition, self.processing);
            self.infinityStonePageVM(infinityStonePageVM);
            //int main view model
            self.infinityStonePageVM().setFFInit(function() {
            });
           // self.applyFilters();
        };
        async function checkChain(item) {
            try {
                await window.ethereum.request({
                    method: 'wallet_switchEthereumChain',
                    params: [{ chainId: '0x38' }],
                });
                if (switchError.code != 4902 && switchError.code != 4001) {
                    getWallet();
                }
            } catch (switchError) {
                if (switchError.code != 4902 && switchError.code != 4001) {
                    getWallet();
                }
                if (switchError.code === 4902) {
                    try {
                        await window.ethereum.request({
                            method: 'wallet_addEthereumChain',
                            params: [{
                                chainId: '0x38',
                                chainName: 'Binance Smart Chain Mainnet',
                                blockExplorerUrls: ['https://bscscan.com/'],
                                rpcUrls: ["https://bsc-dataseed.binance.org/"],
                                nativeCurrency: {
                                    name: 'Binance',
                                    symbol: 'BNB',
                                    decimals: 18,
                                },
                            }],
                        });
                        if (switchError.code != 4902 && switchError.code != 4001) {
                            getWallet();
                        }
                    } catch (addError) {
                        console.error(addError);
                    }
                }
            }
        }
        async function getWallet() {
            const accounts = await ethereum.request({ method: 'eth_requestAccounts' });
            const account = accounts[0];
            fullString = account;
            secondString = account.slice(-4);
            firstString = account.substring(0, 4);
            const accountWallet = firstString + "..." + secondString;
            $('#walletProfile').removeClass('hidden-content');
            showWallet.innerHTML = accountWallet;
            self.walletID = fullString;
            $('#connect-wallet').addClass('hidden-content');
            self.infinityStonePageVM().setFFInit(function (data) {
                if ($('#walletCheck').text().length > 0) {
                    $('#myGamePlay').removeClass('hidden-content');
                };
            });
            self.infinityStonePageVM().setSearchParam("walletID", fullString);
            self.infinityStonePageVM().initData();
        }
        self.clickConnectWallet = function (data) {
            if (window.ethereum) {
                checkChain();
            } else {
                swal(MyBackPackLanguage.valTitleFail, MyBackPackLanguage.valMessageMetamask, "warning");
            }
        };
        self.clickDisconnectWallet = function () {
        }
        ethereum.on('chainChanged', () => {
            window.location.reload();
        });
        window.ethereum.on('accountsChanged', (accounts) => {
            if (accounts.length > 0) {
                window.location.reload();
            } else {
                window.location.reload();
            }
        });
     //Start chart function
        //End chart function
        //Start filter function
        self.applyFilters = function () {
            GetFilterExpression();
            self.infinityStonePageVM().initData();
        };
        self.clearFilters = function () {
            ResetFilterExpression();
            self.applyFilters();
        };
        function GetFilterExpression()
        {
        }
        function ResetFilterExpression()
        {
            ko.utils.arrayForEach(self.infinityStonePageVM().arrSearchParam(), function(p) {
                p.value(null);
            });
        }
     //End filter function
     };
</script>
