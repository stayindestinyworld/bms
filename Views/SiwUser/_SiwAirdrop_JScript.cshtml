<partial name="_CommonJScript" />
<partial name="_FormatJScript" />
<partial name="_ValidateJScript" />
<partial name="_APIJScript" />
<partial name="_SiwAirdropJScript" />
<partial name="_SiwAirdropViewModelJScript" />
<script src="~/Viewmodel/SiwUser/_SiwUserViewModelJScript.js"></script>
<script src="~/Viewmodel/SiwUser/_SiwUserJScript.js"></script>
<script type="text/javascript">
    var SiwUserSiwAirdropViewModel = function () {
        var self = this;
        self.processing = ko.observable(new ModelProcessing());
        self.transition = ko.observable(new ModelTransition());
        self.siwAirdropVM = ko.observable(null);
        self.email = ko.observable(null);
        self.fullname = ko.observable(null);
        self.telegram = ko.observable(null);
        self.twitter = ko.observable(null);
        self.walletID = ko.observable(null);
        const showWallet = document.querySelector(".wallet");
        self.siwUserVM = ko.observable(null);

        var siwUserVM = new SiwUserViewModel();
        siwUserVM.initModel(self.transition, self.processing);
        self.siwUserVM(siwUserVM);

        self.initData = function () {
            var siwAirdropVM = new SiwAirdropViewModel();
            siwAirdropVM.initModel(self.transition, self.processing);
            self.siwAirdropVM(siwAirdropVM);
            //int main view model
            self.siwAirdropVM().setFFInit(function () {

            });
        };
        async function checkChain(item) {
            try {
                await window.ethereum.request({
                    method: 'wallet_switchEthereumChain',
                    params: [{ chainId: '0x38' }],
                });
                if (switchError.code != 4902 && switchError.code != 4001) {
                    getWallet();
                }
            } catch (switchError) {
                if (switchError.code != 4902 && switchError.code != 4001) {
                    getWallet();
                }
                if (switchError.code === 4902) {
                    try {
                        await window.ethereum.request({
                            method: 'wallet_addEthereumChain',
                            params: [{
                                chainId: '0x38',
                                chainName: 'Binance Smart Chain Mainnet',
                                blockExplorerUrls: ['https://bscscan.com/'],
                                rpcUrls: ["https://bsc-dataseed.binance.org/"],
                                nativeCurrency: {
                                    name: 'Binance',
                                    symbol: 'BNB',
                                    decimals: 18,
                                },
                            }],
                        });
                        if (switchError.code != 4902 && switchError.code != 4001) {
                            getWallet();
                        }
                    } catch (addError) {
                        console.error(addError);
                    }
                }
            }
        }
        async function getWallet() {
            const accounts = await ethereum.request({ method: 'eth_requestAccounts' });
            const account = accounts[0];
            fullString = account;
            secondString = account.slice(-4);
            firstString = account.substring(0, 4);
            const accountWallet = firstString + "..." + secondString;
            $('#icon-wallet').removeClass('hidden-content');
            showWallet.innerHTML = accountWallet;
            self.walletID = fullString;
            $('#connect-wallet').addClass('hidden-content');
            self.siwAirdropVM().setFFInit(function (data) {
                console.log(data.siwAirdrop.total);
                if (data.siwAirdrop.siwUser == null) {
                    if ($('#walletCheck').text().length > 0) {
                        $('#form-airdrop').removeClass('hidden-content');
                    };
                } else {
                    $('#registered').removeClass('hidden-content');
                }
            });
            self.siwAirdropVM().setSearchParam("walletID", fullString);
            self.siwAirdropVM().initData();
        }
        self.clickConnectWallet = function (data) {
            if (window.ethereum) {

                checkChain();
            } else {
                swal(SiwAirdropLanguage.valTitleFail, SiwAirdropLanguage.valMessageMetamask, "warning");
            }
        };
        self.submitForm = function (item) {
            if (item.walletID != null) {
                var emailReg = /^([\w-\.]+@@([\w-]+\.)+[\w-]{2,4})?$/;
                if (!emailReg.test(item.email())) {
                    swal(SiwAirdropLanguage.valTitleEmailFail, SiwAirdropLanguage.valMessageEmail, "warning");
                } else if (item.fullname() == null || item.twitter() == null || item.telegram() == null) {
                    swal(SiwAirdropLanguage.valTitleEmptyFail, SiwAirdropLanguage.valMessageEmpty, "warning");
                } else if (item.twitter().charAt(0) != "@@" || item.telegram().charAt(0) != "@@") {
                    swal(SiwAirdropLanguage.valTitleUserFail, SiwAirdropLanguage.valMessageUser, "warning");
                }
                else {
                    var newUser = new SiwUser(
                        0,
                        item.walletID,
                        "",
                        "ACTIVE",
                        0,
                        item.fullname(),
                        item.email(),
                        item.twitter(),
                        item.telegram()
                    );
                    self.siwUserVM().siwUser(newUser);
                    self.siwUserVM().finishEditSiwUser(self.siwUserVM().siwUser());
                    self.siwUserVM().setFFSave(function () {
                        self.email(null);
                        self.fullname(null);
                        self.telegram(null);
                        self.twitter(null);
                        $('#form-airdrop').addClass('hidden-content');
                        $('#registered').removeClass('hidden-content');
                    });
                }
            }
        };
        //Start chart function
        //End chart function
        //Start filter function
        self.applyFilters = function () {
            GetFilterExpression();
            self.siwAirdropVM().initData();
        };
        self.clearFilters = function () {
            ResetFilterExpression();
            self.applyFilters();
        };
        function GetFilterExpression() {
        }
        function ResetFilterExpression() {
            ko.utils.arrayForEach(self.siwAirdropVM().arrSearchParam(), function (p) {
                p.value(null);
            });
        }
        //End filter function
    };
</script>
